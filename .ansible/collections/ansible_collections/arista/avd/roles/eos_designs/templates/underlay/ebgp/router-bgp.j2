{# EBGP #}
{## Underlay network peerings #}
router_bgp:
  peer_groups:
    {{ switch.bgp_peer_groups.ipv4_underlay_peers.name }}:
      type: ipv4
{% if switch.bgp_peer_groups.ipv4_underlay_peers.password is arista.avd.defined() %}
      password: "{{ switch.bgp_peer_groups.ipv4_underlay_peers.password }}"
{% endif %}
      maximum_routes: 12000
      send_community: all
{% if switch.bgp_peer_groups.ipv4_underlay_peers.bgp_listen_range_prefix is arista.avd.defined() %}
      bgp_listen_range_prefix: "{{ switch.bgp_peer_groups.ipv4_underlay_peers.bgp_listen_range_prefix }}"
{% endif %}  
{% if switch.bgp_peer_groups.ipv4_underlay_peers.peer_filter is arista.avd.defined() %}
      peer_filter: "{{ switch.bgp_peer_groups.ipv4_underlay_peers.peer_filter }}"
{% endif %}  
{##### remote as 추가 #####}
{% if switch.bgp_peer_groups.ipv4_underlay_peers.remote_as is arista.avd.defined() %}
      remote_as: "{{ switch.bgp_peer_groups.ipv4_underlay_peers.remote_as }}"
{% endif %}
  address_family_ipv4:
    peer_groups:
      {{ switch.bgp_peer_groups.ipv4_underlay_peers.name }}:
        activate: true
{% if underlay_rfc5549 is arista.avd.defined(true) %}
        next_hop:
          address_family_ipv6_originate: true
{% endif %}
{% if switch.underlay_ipv6 is arista.avd.defined(true) %}
  address_family_ipv6:
    peer_groups:
      {{ switch.bgp_peer_groups.ipv4_underlay_peers.name }}:
        activate: true
{% endif %}
  redistribute_routes:
    connected:
      route_map: RM-CONN-2-BGP

{% if underlay_rfc5549 is arista.avd.defined(true) %}
{# RFC5549 EBGP peerings #}
  neighbor_interfaces:
{%     for link in underlay_data.links | arista.avd.natural_sort('interface') if link.type is arista.avd.defined('underlay_p2p') %}
    {{ link.interface }}:
      peer_group: {{ switch.bgp_peer_groups.ipv4_underlay_peers.name }}
      remote_as: "{{ link.peer_bgp_as }}"
      description: {{ link.peer }}_{{ link.peer_interface }}
{%     endfor %}

{% else %}
{# Regular EBGP peerings #}
{# type:  ipv4추가, description 변경 #}
  neighbors:
{%     for link in underlay_data.links | arista.avd.natural_sort('interface') if link.type is arista.avd.defined('underlay_p2p') %}
    {{ link.peer_ip_address }}:
      peer_group: {{ switch.bgp_peer_groups.ipv4_underlay_peers.name }}
      type: ipv4
      remote_as: "{{ link.peer_bgp_as }}"
{#      description: {{ link.peer }}_{{ link.peer_interface }} #}
      description: {{ link.peer }}
{%         if link.bfd is arista.avd.defined %}
      bfd: {{ link.bfd }}
{%         endif %}
{%     endfor %}
{% endif %}
